<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">


    <bean id="helloSpring" class="cn.bdqn.test.HelloSpring">
        <!--<property name="who">
            <value>Struts</value>
        </property>-->
        <property name="who" value="红红"/>
    </bean>

    <bean id="saywords" class="cn.bdqn.test.Person">


        <constructor-arg index="0" name="name" value="张嘎" >

        </constructor-arg>
        <constructor-arg index="1" name="words" value="三天不打小鬼子，手都痒痒">

        </constructor-arg>
   </bean>

    <!-- p:name="张浩" p:words="从你的全世界路过"-->
    <bean id="people1" class="cn.bdqn.test.Person"
       >
        <property name="name">
           <null/>
        </property>
        <property name="words">
            <value>三天不打小鬼子，手都痒痒,5&lt;8 10&gt;4 &amp; 2234 </value>
        </property>
        <property name="pList">
            <list>
                <value>中文</value>
                <value>英文</value>
            </list>

        </property>
        <property name="hobbies">
            <map>
                <entry>
                    <key><value>1</value></key>
                    <value>弹钢琴</value>
                </entry>
                <entry>
                    <key><value>2</value></key>
                    <value>打篮球</value>
                </entry>
                <entry>
                    <key><value>3</value></key>
                    <value>看书</value>
                </entry>
            </map>

        </property>
    </bean>


    <bean id="people2" class="cn.bdqn.test.Person">
        <property name="name">
            <value>小黑</value>
        </property>
        <property name="words">
            <value>喜欢你，没道理</value>
        </property>
    </bean>




    <bean id="colorInk" class="cn.bdqn.ink.ColorInk" />
    <!-- 定义灰色墨盒bean，该bean的id是greyInk，class指定该bean实例的实现类 -->
    <bean id="greyInk" class="cn.bdqn.ink.GreyInk" />
    <!-- 定义A4纸张bean，该bean的id是a4Paper，class指定该bean实例的实现类 -->
    <bean id="a4Paper" class="cn.bdqn.paper.TextPaper">
        <!-- property元素用来指定需要容器注入的属性，charPerLine需要容器注入， TextPaper类必须拥有setCharPerLine()方法。 注入每行字符数 -->
        <property name="charPerLine" value="10" />
        <!-- property元素用来指定需要容器注入的属性，linePerPage需要容器注入，TextPaper类必须拥有setLinePerPage()方法。 注入每页行数 -->
        <property name="linePerPage" value="8" />
    </bean>
    <!-- 定义B5纸张bean，该bean的id是b5Paper，class指定该bean实例的实现类 -->
    <bean id="b5Paper" class="cn.bdqn.paper.TextPaper">
        <!-- property元素用来指定需要容器注入的属性，charPerLine需要容器注入， TextPaper类必须拥有setCharPerLine()方法。注入每行字符数 -->
        <property name="charPerLine" value="6" />
        <!-- property元素用来指定需要容器注入的属性，linePerPage需要容器注入， TextPaper类必须拥有setLinePerPage()方法。注入每页行数 -->
        <property name="linePerPage" value="5" />
    </bean>

    <!-- 组装打印机。定义打印机bean，该bean的id是printer， class指定该bean实例的实现类 -->
    <bean id="printer" class="cn.bdqn.print.Printer">
        <!-- 通过ref属性注入已经定义好的bean -->
        <!-- 注入彩色墨盒   引用对象-->
        <property name="ink" ref="colorInk"></property>
        <!-- 注入A4打印纸张 -->
        <property name="paper" ref="b5Paper"></property>
    </bean>



    <bean id="dao" class="cn.spring.dao.impl.UserDaoImpl"></bean>

    <bean id="service" class="cn.spring.servlce.impl.UserServiceImpl">
        <property name="dao" ref="dao"></property>
    </bean>



    <bean id="theLogger" class="cn.spring.aop.UserServiceLogger"></bean>
    <aop:config proxy-target-class="false">

        <aop:pointcut id="pointcut" expression="execution(public void addUser(cn.spring.entity.User))"/>
        <!--引用包含增强方法的bean-->
        <aop:aspect ref="theLogger">
            <aop:before method="before" pointcut-ref="pointcut"></aop:before>
            <aop:after-returning method="afterReturning" pointcut-ref="pointcut" returning="result" />
        </aop:aspect>
    </aop:config>



    <bean id="employeeService" class="cn.spring.servlce.impl.EmployeeService" />
    <bean id="employeeLoggerService" class="cn.spring.aop.EmployeeLoggerService"/>
    <aop:config>
        <aop:pointcut id="employeeLoggerServicePointcut" expression="execution(* cn.spring..*.*(int,String))"/>
        <aop:aspect ref="employeeLoggerService">
            <aop:before method="before" pointcut-ref="employeeLoggerServicePointcut" />
            <!--返回值 returning="result"-->
            <aop:after-returning method="afterReturnning" pointcut-ref="employeeLoggerServicePointcut" returning="result" />

            <aop:after-returning method="before2" pointcut-ref="employeeLoggerServicePointcut" />

        </aop:aspect>
    </aop:config>



</beans>